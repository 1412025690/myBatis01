<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 映射文件:实体类与数据库表的映射 ORM思想 object relation mapping
     SQL语句从代码的硬编码当中抽取出来
-->
<!-- namespace="实体类的完全限定名" -->
<mapper namespace="com.kkb.mapper.TeamMapper">

    <delete id="delList" >
        delete from team where teamId in
        <!--
            collection: 要遍历的集合,参数是集合类型,直接写list
            item:遍历的集合当中每一个数据
            separator:将遍历的结果用,分割
            open close : 表示 将遍历的结果使用open close包裹起来
        -->
        <foreach collection="list" item="teamId" separator="," open="(" close=")">
            #{teamId}
        </foreach>
    </delete>

    <insert id="addList" parameterType="arraylist">
        INSERT INTO team (teamName,location) VALUE
        <!--
            collection: 要遍历的集合,参数是集合类型,直接写list
            item:遍历的集合当中每一个数据
            separator:将遍历的结果用,分割
        -->

        <foreach collection="list" item="t" separator=",">
            (#{t.teamName},#{t.location})
        </foreach>
    </insert>


    <select id = "queryByVO" parameterType="QueryVO" resultMap="baseResultMap">
        select * from team
        <where>
            <!-- 如果用户输入了名称,就模糊查询 -->
            <if test="name != null">
                teamName like concat(concat('%',#{name}),'%')
            </if>
            <if test="beginTime != null">
                and createTime >= #{beginTime}
            </if>
            <if test="endTime != null">
                and createTime &lt;= #{endTime}
            </if>
            <if test="location != null">
                and location = #{location}
            </if>
        </where>
    </select>
    <!--
        返回类型可以是基本类型: 要求返回的数据必须是 单行,
        如果是 单行 多列 也取不到后面的值
        如果是多行 则报错 : SQLSyntaxErrorException
     -->
    <select id="getCount" resultType="java.lang.Integer">
        select count(teamId) from team
    </select>


    <select id="getTwoColumn" resultType="java.util.HashMap">
        select count(teamId) as 'sum',max(teamId) as 'max' from team
        where teamId = #{id}
    </select>

    <select id="getTwoColumnList" resultType="java.util.HashMap">
        select count(teamId) as 'sum',max(teamId) as 'max' from team group by location
    </select>


    <select id="queryByName" resultType="com.kkb.pojo.Team">
        select * from team
        where teamName = #{teamName}
    </select>

    <select id="queryByLocation" resultType="com.kkb.pojo.Team">
        select * from team
        where location = #{location}
    </select>

    <select id="queryByFiled" resultType="com.kkb.pojo.Team">
        select * from team
        where ${column} = #{columnValue}
    </select>



    <!--  方式1
        细节1:
            从 mybatis3.3 版本之前可以直接写#{0} #{1}
            从 mybatis3.4 版本开始需要使用#{arg0} #{arg1} ... 或者 #{param1} #{param2} ...
        细节2:
            sql语句当中不能使用小于号 使用转义符替代(&lt;)  大于号没有限制 也可以使用转义符号(&gt)
        常问面试题: #{} ${} 有什么区别
                 #{} 是预编译处理 相当于 jdbc的占位符
                 ${} 是将传入的数据都当成一个字符串 , 会对自动传入的数据加一个双引号
     -->
    <select id="queryByRange1" resultType="com.kkb.pojo.Team">
        select * from team
        where teamId >= #{arg0} and teamId &lt;= #{arg1}
    </select>
    <!-- 方式2 #{} 中名称必须与接口方法中参数注解名称一致 @Param()   推荐使用! -->
    <select id="queryByRange2" resultType="com.kkb.pojo.Team">
        select * from team
        where teamId >= #{min} and teamId &lt;= #{max}
    </select>
    <!-- 方式3 #{} 中名称必须与Map集合中key保持一致 -->
    <select id="queryByRange3" resultType="com.kkb.pojo.Team">
        select * from team
        where teamId >= #{min} and teamId &lt;= #{max}
    </select>
    <!-- 方式4 #{} 中名称必须与 pojo 的参数属性保持一致 -->
    <select id="queryByCondition" resultType="com.kkb.pojo.Team">
        select * from team
        where teamId >= #{min} and teamId &lt;= #{max} and teamName
        like #{name} and location = #{location}
    </select>

    <delete id="del">
        delete from team where teamId = #{id}
    </delete>

    <!-- 根据id更改用户名与地址 -->
    <update id="update" parameterType="com.kkb.pojo.Team">
        update team set teamName = #{teamName},location = #{location},createTime = #{createTime}
        where teamId = #{teamId}
    </update>

    <update id="update1" parameterType="com.kkb.pojo.Team">
        update team
        <set>
            <if test="teamName != null">
                teamName = #{teamName},
            </if>
            <if test="location != null">
                location = #{location},
            </if>
            <if test="createTime != null">
                createTime = #{createTime},
            </if>
        </set>
        where teamId =  #{teamId}
    </update>


    <!--
        添加一个球队
        parameterType: 将对象作为参数,
        #{值} 必须是实体类中属性名称 其实就是占位符 '?'
     -->
    <insert id="add" parameterType="com.kkb.pojo.Team">
        <!--
            新增成功之后将自增的id赋值给参数属性teamId
            keyProperty : 表示新增的id值赋值到那个属性当中
            order       : AFTER/BEFORE 两个取值 , 表示selectKey当中sql语句在insert语句之前还是之后执行
            resultType  : 返回值类型
        -->
        <selectKey keyProperty="teamId" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id()
        </selectKey>
        INSERT INTO `team` (`teamName`, `location`, `createTime`)
        VALUES (#{teamName}, #{location}, #{createTime})
    </insert>

    <!-- id:自定义名称,不能重复;相当于原来的Dao当中的方法名称
         resultType:返回的类型,如果是集合写的是集合当中元素的类型 : 使用要求: 实体类当中属性和表当中列名一致
    -->
    <select id="queryAll" resultType="com.kkb.pojo.Team">
        select * from team
    </select>
    <!-- parameterType:表示参数类型,参数唯一的时候才使用该属性;可以省略,框架会自己判定类型
         #{自定义的参数名称} 名称没有实际意义
     -->
    <select id="queryById" parameterType="java.lang.Integer" resultType="com.kkb.pojo.Team">
        select * from team where teamId = ${id}
    </select>

    <!--
        resultMap 与 resultType 不能同时出现
        resultMap : 是引用的自己创建resultMap的名称
     -->
    <select id="queryAll2" resultMap="baseResultMap">
        select * from team
    </select>


    <!--
        创建resultMap: 相当于自己去编写表中的列与实体类当中的属性映射
        id: resultMap 的名称,要求唯一
        type: 期待要映射为java的什么类型
    -->
    <resultMap id="baseResultMap" type="com.kkb.pojo.Team">
        <!--一般主键列用id,其余列用result
            column：表示数据库表中的列名，不区分大小写
            property：表示实体类中的对应的属性名，区分大小写
            javaType：实体类中的对应的属性的类型，可以省略，mybatis会自己推断
            jdbcType="数据库中的类型column的类型" 一般省略
        -->
        <id column="teamId" property="teamId" javaType="java.lang.Integer" ></id>
        <result column="teamName" property="teamName" javaType="java.lang.String"></result>
        <result column="location" property="location" javaType="java.lang.String"></result>
        <result column="createTime" property="createTime" javaType="java.util.Date"></result>
    </resultMap>


    <!-- 1.连接查询 + 引用关联对象结果映射 -->
    <select id="queryById1" resultMap="joinPlayMap1">
        select * from team t inner join player p on t.teamId = p.teamId where t.teamId = #{id}
    </select>
    <!--
        collection: 对多映射的节点
        property:   实体类中要查询的集合
        javaType:   集合类型
        ofType:     集合类型当中元素的类型
        resultMap:  引用那个结果的映射
    -->
    <resultMap id="joinPlayMap1" type="Team" extends="baseResultMap">
        <collection property="playerList1" javaType="arraylist" ofType="Player" resultMap="com.kkb.mapper.PlayerMapper.baseResultMap" />
    </resultMap>

    <!-- 2.使用关联对象单独的查询语句 -->
    <select id="queryById2" resultMap="joinPlayMap2">
        select * from team where teamId = #{id}
    </select>
    <resultMap id="joinPlayMap2" type="Team" extends="baseResultMap">
        <collection property="playerList2" javaType="arraylist" ofType="Player" select="com.kkb.mapper.PlayerMapper.queryByTeamId" column="teamId" />
    </resultMap>
</mapper>
